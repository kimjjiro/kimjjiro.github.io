{"version":3,"sources":["frame/Header.tsx","components/profile-component/ProfileWrapper.tsx","frame/Profile.tsx","frame/Footer.tsx","pages/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","href","size","React","Component","ProfileWrapper","this","props","children","Profile","Links","icon","url","tooltip","styles","style","map","item","index","key","Footer","Layout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAoCeA,E,uKA/BP,OACI,4BAAQC,UAAU,cACd,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,eACX,uBAAGC,KAAK,KAAR,WAIJ,yBAAKD,UAAU,cACX,wBAAIA,UAAU,iBACV,wBAAIA,UAAU,oBACV,uBAAGC,KAAK,UAAR,UAIJ,wBAAID,UAAU,oBACV,uBAAGC,KAAK,UAAR,WAKR,4BAAQD,UAAU,qBACd,kBAAC,IAAD,CAAaE,KAAK,kB,GAxBzBC,IAAMC,WCSZC,E,uKARP,OACI,wBAAIL,UAAU,iBACRM,KAAKC,MAAMC,c,GAJAL,IAAMC,WC8CpBK,E,4MAvCXC,MAAe,CACX,CACIC,KAAM,kBAAC,IAAD,MACNC,IAAK,GACLC,QAAS,aAEb,CACIF,KAAM,kBAAC,IAAD,MACNC,IAAK,GACLC,QAAS,YAEb,CACIF,KAAM,kBAAC,IAAD,MACNC,IAAK,8BACLC,QAAS,W,EAIjBC,OAAS,G,uDAKL,OACI,6BAASd,UAAU,cAAce,MAAOT,KAAKQ,QACzC,kBAAC,EAAD,KACKR,KAAKI,MAAMM,KAAI,SAACC,EAAMC,GAAP,OACZ,wBAAIC,IAAKD,GACL,uBAAGjB,KAAMgB,EAAKL,KACTK,EAAKN,MAAQ,kB,GA9BxBR,IAAMC,WCIbgB,E,uKARP,OACI,4BAAQpB,UAAU,cACd,0C,GAJKG,IAAMC,WCeZiB,E,uKAVP,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANKlB,IAAMC,WCUZkB,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCEcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c79058bc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IoIosSearch } from 'react-icons/io';\r\n\r\nclass Header extends React.Component<{}, {}> {\r\n    render () {\r\n        return (\r\n            <header className=\"App-Header\">\r\n                <div className=\"Header-Wrapper\">\r\n                    <div className=\"Header-Logo\">\r\n                        <a href=\"/\">\r\n                            Jiirog\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"Header-Nav\">\r\n                        <ul className=\"Header-Nav-Ul\">\r\n                            <li className=\"Header-Nav-Ul-Li\">\r\n                                <a href=\"/posts\">\r\n                                    Posts\r\n                                </a>\r\n                            </li>\r\n                            <li className=\"Header-Nav-Ul-Li\">\r\n                                <a href=\"/about\">\r\n                                    About\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                        <button className=\"Header-Nae-Search\">\r\n                            <IoIosSearch size=\"1.5em\"/>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass ProfileWrapper extends React.Component<{}, {}> {\r\n    render() {\r\n        return (\r\n            <ul className=\"Profile-Links\">\r\n                { this.props.children }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileWrapper;","import React from 'react';\r\nimport {\r\n    IoLogoInstagram,\r\n    IoLogoGithub,\r\n    IoLogoLinkedin,\r\n  } from \"react-icons/io\";\r\nimport ProfileWrapper from '../components/profile-component/ProfileWrapper';\r\n\r\nclass Profile extends React.Component<{}, {}> {\r\n    Links: any[] = [\r\n        {\r\n            icon: <IoLogoInstagram />,\r\n            url: \"\",\r\n            tooltip: \"Instagram\"\r\n        },\r\n        {\r\n            icon: <IoLogoLinkedin />,\r\n            url: \"\",\r\n            tooltip: \"LinkedIn\"\r\n        },\r\n        {\r\n            icon: <IoLogoGithub />,\r\n            url: \"https://github.com/kimjjiro\",\r\n            tooltip: \"Github\"\r\n        }\r\n    ];\r\n\r\n    styles = {\r\n        // height: '1000px'\r\n    };\r\n      \r\n    render () {\r\n        return (\r\n            <section className=\"App-Profile\" style={this.styles}>\r\n                <ProfileWrapper>\r\n                    {this.Links.map((item, index) => (\r\n                        <li key={index}>\r\n                            <a href={item.url}>\r\n                                {item.icon || 'icon'}\r\n                            </a>\r\n                        </li>\r\n                    ))}\r\n                </ProfileWrapper>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\n\r\nclass Footer extends React.Component<{}, {}> {\r\n    render () {\r\n        return (\r\n            <footer className=\"App-Footer\">\r\n                <p>Footer</p>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Header from '../frame/Header';\r\nimport Profile from '../frame/Profile';\r\nimport Footer from '../frame/Footer';\r\n\r\nclass Layout extends React.Component<{}, {}> {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header />\r\n                <Profile />\r\n                <Footer />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\nimport './App.css';\n// import Profile from './components/Profile';\n// import Posts from './components/Posts';\nimport Layout from './pages/Layout';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}