{"componentChunkName":"component---src-templates-post-template-tsx","path":"/post/javascript-map-vs-foreach/","result":{"data":{"markdownRemark":{"id":"a8fd46e3-a363-507c-9d62-7d43a97cd3e6","fields":{"slug":"/post/javascript-map-vs-foreach/"},"html":"<p>React초보로써 Navbar를 그리던 중 Map으로 그렸을 땐 나오고 forEach로 그렸을 땐 안나와서 알아본다.</p>\n<h3>forEach</h3>\n<pre><code>executes a provided function once for each array element.   \n</code></pre>\n<p>각각의 엘리먼트마다 한번씩 제공된 함수를 실행한다.   </p>\n<h2>Map</h2>\n<pre><code>creates a new array with the result of calling a provided function on every element in the calling array.   \n</code></pre>\n<p>모든 엘리먼트에서 제공된 함수를 호출 한 결과로 새 배열을 만든다   </p>\n<p>대충 해석해 봤지만 정확히 어떤 뜻일까   </p>\n<p>map과 forEach는 거의 동일하지만 리턴에서 차이를 보인다.   </p>\n<pre><code>forEach   \nvar numbers = [1, 2, 3, 4, 5];   \nvar doubles = numbers.forEach( (node, index) => { return node * 2} );   \nconsole.log(doubles); // undefined   \n</code></pre>\n<pre><code>Map   \nvar numbers = [1, 2, 3, 4, 5];   \nvar doubles = numbers.map( (node, index) => { return node * 2} );   \nconsole.log(doubles); // [2, 4, 6, 8, 10]   \n</code></pre>\n<p>이제 뭔가 뒤통수를 맞은듯 쎄한 느낌이 온다.<br>\n아래 소스는 메뉴를 만들 때 사용한 소스다. 물론 개선되어야 할 여지가 많지만 1차 목표는 완성이기에 나중에 리팩토링하기로 한다(기약없이 미룬다).   </p>\n<pre><code>&#x3C;Nav>\n    {menu.forEach((item, index) => (\n        &#x3C;Nav.Link key={index} href={item.link}>\n            {item.text}\n        &#x3C;/Nav.Link>\n    ))}\n&#x3C;/Nav>\n</code></pre>\n<pre><code>&#x3C;Nav>\n    {menu.map((item, index) => (\n        &#x3C;Nav.Link key={index} href={item.link}>\n            {item.text}\n        &#x3C;/Nav.Link>\n    ))}\n&#x3C;/Nav>\n</code></pre>\n<p>그렇다 이제 보인다. 두 코드의 결과는 아래와 같다.   </p>\n<pre><code>forEach\n&#x3C;Nav>\n&#x3C;/Nav>\n</code></pre>\n<pre><code>Map\n&#x3C;Nav>\n    &#x3C;Nav.Link key=\"1\" href=\"/ABOUT\">\n        ABOUT\n    &#x3C;/Nav.Link>\n&#x3C;/Nav>\n</code></pre>\n<p>끝.</p>","frontmatter":{"title":"JavaScript Array의 Map vs forEach","date":"2020-04-06"}}},"pageContext":{"slug":"/post/javascript-map-vs-foreach/"}}}